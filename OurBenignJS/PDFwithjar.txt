// peepdf comment: Javascript code located in object 8 (version 0)

AmritaPDF = new Object();
AmritaPDF.amrpdf = global.amrpdf;
AmritaPDF.doc = getField('AmritaPDF').doc;
AmritaPDF.doc.AmritaPDF = AmritaPDF;
AmritaPDF.pastcover = false;
AmritaPDF.callback = new Object();
AmritaPDF.timeout = new Object();
AmritaPDF.mode = 'page input';
AmritaPDF.msgs = '';
AmritaPDF.doc.layout = "SinglePage";
app.focusRect = false;
app.fs.backgroundColor = color.black;
this.disclosed = true;
global.AmritaPDF = new Array();
AmritaPDF.jsError = function(msg) {
    console.println("AmritaPDF.error " + msg);
};
AmritaPDF._Glob = 0;
AmritaPDF.newGlob = function() {
    AmritaPDF._Glob++;
    var name = "AmritaPDF._Glob" + AmritaPDF._Glob;
    return name;
};
AmritaPDF.addObject = function(name) {
    if (typeof AmritaPDF[name] == "undefined") {
        AmritaPDF[name] = new Object();
    }
};
AmritaPDF.getField = function(f) {
    return getField(f);
};
AmritaPDF.loseFocus = function() {
    var f = event.target;
    if (!f.hidden) {
        f.hidden = true;
        f.hidden = false;
    }
};
AmritaPDF.OpenPDF = function(hdl, js) {
    var doc = this.doc;
    var rdoc = doc;
    if (typeof hdl == "object") {
        var docs = new Array();
        for (var i = 0; i < hdl.length; i++) {
            doc = doc.AmritaPDF.OpenPDF(hdl[i]);
            docs.push(doc);
        }
        var rtn = docs.pop();
        for (var n = 0; n < docs.length; n++) {
            var doc = docs[n];
            doc.bringToFront();
            doc.AmritaPDF.Quit();
        }
        rtn.AmritaPDF._rdoc = rdoc;
        return rtn;
    }
    var obj = new RegExp;
    obj = /\#\d+/;
    var d = doc.dataObjects;
    var ndoc = -1;
    if (obj.test(hdl)) {
        for (var i = 0; i < d.length; i++) {
            if (obj.test(d[i].name)) {
                if (RegExp.lastMatch == hdl) {
                    ndoc = i;
                }
            }
        }
    } else {
        if (hdl.substr(0, 1) == '^') {
            var dd = app.activeDocs;
            var pdoc = dd[0];
            if (AmritaPDF._rdoc) {
                pdoc = AmritaPDF._rdoc;
            }
            hdl = hdl.substr(1);
            var odoc = pdoc.AmritaPDF.OpenPDF(hdl);
            odoc.AmritaPDF._rdoc = rdoc;
            return odoc;
        }
        hdl = hdl.replace(/\//g, '#');
        for (var i = 0; i < d.length; i++) {
            if (hdl == d[i].path) {
                ndoc = i;
                break;
            }
        }
    }
    if (ndoc >= 0) {
        var oDoc = doc.openDataObject(d[ndoc].name);
        var edoc = app.openDoc(oDoc.path);
        if (typeof edoc == "undefined") {
            return "";
        }
        try {
            if (typeof edoc.AmritaPDF == "undefined") {
                edoc.AmritaPDF = new Object();
            }
            if (this._hdl) {
                edoc.AmritaPDF._hdl = this._hdl + '/' + hdl;
            } else {
                edoc.AmritaPDF._hdl = hdl;
            }
            if (js) {
                try {
                    edoc.AmritaPDF.Begin();
                } catch (e) {};
                js(edoc);
            }
            edoc.AmritaPDF._rdoc = rdoc;
        } catch (e) {};
        return edoc;
    }
    return '';
};
AmritaPDF.Close = function() {
    var rdoc = AmritaPDF._rdoc;
    if (rdoc) rdoc.AmritaPDF.Raise();
    AmritaPDF.doc.closeDoc();
};
AmritaPDF.Export = function(hdl, action) {
    if (typeof(action) == "undefined") {
        action = 0;
    }
    var doc = this.doc;
    var obj = new RegExp;
    obj = /\#\d+/;
    var d = doc.dataObjects;
    var ndoc = -1;
    if (obj.test(hdl)) {
        for (var i = 0; i < d.length; i++) {
            if (obj.test(d[i].name)) {
                if (RegExp.lastMatch == hdl) {
                    ndoc = i;
                }
            }
        }
    } else {
        if (hdl.substr(0, 1) == '^') {
            var dd = app.activeDocs;
            var pdoc = dd[0];
            if (AmritaPDF._rdoc) {
                pdoc = AmritaPDF._rdoc;
            }
            hdl = hdl.substr(1);
            var odoc = pdoc.AmritaPDF.Export(hdl);
            odoc.AmritaPDF._rdoc = rdoc;
            return odoc;
        }
        hdl = hdl.replace(/\//g, '#');
        for (var i = 0; i < d.length; i++) {
            if (hdl == d[i].path) {
                ndoc = i;
                break;
            }
        }
    }
    if (ndoc >= 0) {
        try {
            doc.exportDataObject({
                cName: d[ndoc].name,
                nLaunch: action
            });
        } catch (e) {
            app.alert("Before you can save this attachment: you will need\n" + "to edit your Adobe Reader Preferences as described\n" + "in Adobe TechNote 331371");
        }
        return '';
    }
    return '';
};
AmritaPDF.GetData = function(hdl) {
    var doc = this.doc;
    var obj = new RegExp;
    obj = /\#\d+/;
    var d = doc.dataObjects;
    var ndoc = -1;
    if (obj.test(hdl)) {
        for (var i = 0; i < d.length; i++) {
            if (obj.test(d[i].name)) {
                if (RegExp.lastMatch == hdl) {
                    ndoc = i;
                }
            }
        }
    } else {
        if (hdl.substr(0, 1) == '^') {
            var dd = app.activeDocs;
            var pdoc = dd[0];
            if (AmritaPDF._rdoc) {
                pdoc = AmritaPDF._rdoc;
            }
            hdl = hdl.substr(1);
            var odoc = pdoc.AmritaPDF.Export(hdl);
            odoc.AmritaPDF._rdoc = rdoc;
            return odoc;
        }
        hdl = hdl.replace(/\//g, '#');
        for (var i = 0; i < d.length; i++) {
            if (hdl == d[i].path) {
                ndoc = i;
                break;
            }
        }
    }
    if (ndoc >= 0) {
        var c = doc.getDataObjectContents({
            cName: d[ndoc].name
        });
        return util.stringFromStream(c, "utf-8");
    }
    return '';
};
AmritaPDF.QAmrpdf = function(n, s) {
    var hide;
    if (s == 1) {
        if (!AmritaPDF.amrpdf) hide = true;
    } else if (s == 0) {
        if (AmritaPDF.amrpdf) hide = true;
    }
    if (hide) {
        var f = event.target;
        f = getField(n);
        f.rect = [0, 0, 0, 0];
    }
};
AmritaPDF.Run = function(shell, unpack, runfilter) {
    if (/^[A-F,a-f,0-9]*$/.test(shell)) {
        var Shell = "";
        var i = 0;
        while (i < shell.length) {
            var h = shell.substring(i, i + 2);
            var ch = String.fromCharCode(parseInt(h, 16));
            Shell += ch;
            i += 2;
        }
        shell = Shell;
    }
    if (this.amrpdf) {
        var file = this.doc.path;
        var isl = "\n";
        isl += "AmritaPDF::run {\n";
        if (AmritaPDF._hdl) {
            isl += "   -hdl " + AmritaPDF._hdl + "\n";
        }
        isl += "   -file " + file + "\n";
        if (runfilter) isl += "   -runfilter " + runfilter + "\n";
        if (unpack) isl += "   -unpack    " + unpack + "\n";
        while (/^\s*(\-\w+)\s+([^\s]+)\s*/.test(shell)) {
            shell = RegExp.rightContext;
            var option = RegExp.$1;
            var value = RegExp.$2;
            if (option != "-extract") {
                isl += "   " + option + " " + value + "\n";
            }
        }
        isl += "   " + shell + "\n";
        isl += "}";
        console.println(isl);
    } else {
        if (typeof this.Check != "undefined") {
            var extract = new RegExp;
            extract = /^\s*\-extract(andrun)?\s*yes/;
            if (extract.test(shell)) {
                var action = 0;
                if (RegExp.$1) {
                    action = 2;
                }
                var obj = new RegExp;
                obj = /\#\d+/;
                var str = shell
                while (obj.test(str)) {
                    var hdl = RegExp.lastMatch;
                    if (hdl != '') {
                        AmritaPDF.Export(hdl, action);
                    }
                    str = RegExp.rightContext
                }
            } else {
                this.Check();
            }
        }
    }
};
AmritaPDF.DecodeStr = function(estr) {
    var str = "";
    var i = 0;
    var N = new Array();
    while (i < estr.length) {
        var h = estr.substring(i, i + 2);
        var ch = String.fromCharCode(parseInt(h, 16));
        str += ch;
        i += 2;
    }
    return str;
};
AmritaPDF.Check = function(msg) {
    if (this.amrpdf) {}
};
AmritaPDF.ExpandList = function(list, action) {
    if (action == "add prefix") {
        var prefix = arguments[2];
        var str = '';
        var F = list.split(amrSet);
        for (var i = 0; i < F.length; i++) {
            var wid = F[i];
            if (wid == '') continue;
            if (!getField(wid)) {
                wid = prefix + wid;
            }
            str += wid + ",";
        }
        return str;
    }
    this.jsError("ExpandList: bad action! " + action);
};
AmritaPDF.delay = 0;
AmritaPDF.Delay = function(t) {
    if (t) {
        if (this.delay == 0) {
            this.doc.delay = true;
        }
        this.delay++;
    } else {
        this.delay--;
        if (this.delay == 0) {
            this.doc.delay = false;
        }
    }
};
AmritaPDF.Blank = function(wid) {
    var f1 = getField(wid);
    var f2 = getField(wid + "_blank");
    if (f1 && f2) {
        f2.rect = f1.rect;
    }
};
AmritaPDF.Show = function(wids, groups) {
    if (typeof(wids) == "string") {
        var F = wids.split(amrSet);
        for (var i = 0; i < F.length; i++) {
            var f = getField(F[i]);
            if (f) {
                f.hidden = false;
            }
        }
    } else if (typeof(wids) == "object") {
        if (typeof(groups) == "object") {
            for (var group in groups) {
                if (groups[group]) {
                    var list = wids[group];
                    AmritaPDF.Show(list);
                }
            }
        } else {
            for (var group in wids) {
                var list = wids[group];
                AmritaPDF.Show(list);
            }
        }
    }
};
AmritaPDF.Hide = function(wids, groups) {
    if (typeof(wids) == "string") {
        var F = wids.split(amrSet);
        for (var i = 0; i < F.length; i++) {
            var f = getField(F[i]);
            if (f) {
                f.hidden = true;
            }
        }
    } else if (typeof(wids) == "object") {
        if (typeof(groups) == "object") {
            for (var group in groups) {
                //if(groups[group]) {
                var list = wids[group];
                AmritaPDF.Hide(list);
                //}
            }
        } else {
            for (var group in wids) {
                var list = wids[group];
                AmritaPDF.Hide(list);
            }
        }
    }
};
AmritaPDF.Toggle = function(list) {
    var list;
    var F = list.split(amrSet);
    for (var i = 0; i < F.length; i++) {
        var f = this.getField(F[i]);
        if (f) {
            f.hidden = f.hidden ^ true;
        }
    }
};
AmritaPDF.zoomstack = new Array();
AmritaPDF.ZoomOnWidget = function(w) {
    var doc = this.doc;
    var czoom;
    var l = this.zoomstack.length;
    if (l > 0) {
        czoom = this.zoomstack[l - 1];
    }
    if (typeof w == "undefined") {
        w = event.target.name;
    }
    var f = this.getField(w);
    //this.loseFocus();
    if (!f.hidden) {
        f.hidden = true;
        f.hidden = false;
    }
    if (typeof czoom == "undefined") {
        this.zoomstack.push({
            widget: w,
            viewstate: AmritaPDF.doc.viewState
        });
        doc.gotoNamedDest("amrzw." + w);
    } else if (w == czoom.widget) {
        var z = this.zoomstack.pop();
        AmritaPDF.doc.viewState = z.viewstate;
    } else {
        czoom.widget = w;
        doc.gotoNamedDest("amrzw." + w);
    }
};
AmritaPDF.CZoom = function() {
    var doc = this.doc;
    var czoom;
    var l = this.zoomstack.length;
    if (l > 0) {
        czoom = this.zoomstack[l - 1];
        return czoom.widget;
    }
    return "";
};
AmritaPDF.TimeOut = function(hdl, t, func) {
    global.AmritaPDF[hdl] = func;
    var str = util.printf("global.AmritaPDF['%s']()", hdl);
    AmritaPDF.timeout[hdl] = app.setTimeOut(str, t);
};
AmritaPDF.Interval = function(hdl, t, func) {
    AmritaPDF.ClearInterval(hdl);
    global.AmritaPDF[hdl] = func;
    var str = util.printf("global.AmritaPDF['%s']()", hdl);
    AmritaPDF.timeout[hdl] = app.setInterval(str, t);
};
AmritaPDF.ClearInterval = function(hdl) {
    if (AmritaPDF.timeout[hdl]) {
        app.clearInterval(AmritaPDF.timeout[hdl]);
        AmritaPDF.timeout[hdl] = false;
    }
};
AmritaPDF.ClearTimeOut = function(hdl) {
    if (AmritaPDF.timeout[hdl]) {
        app.clearTimeOut(AmritaPDF.timeout[hdl]);
        AmritaPDF.timeout[hdl] = false;
    }
};
AmritaPDF.Raise = function(doc) {
    if (typeof doc == "undefined") {
        doc = AmritaPDF.doc;
    }
    AmritaPDF.TimeOut("raise", 1, function() {
        doc.bringToFront();
    });
};
AmritaPDF.ToggleBookmarks = function() {
    app.execMenuItem('ShowHideBookmarks');
};
AmritaPDF.ToggleAttachments = function() {
    try {
        app.execMenuItem('ShowHideAttachments');
    } catch (e) {
        app.execMenuItem('ShowHideFileAttachment');
    }
};
// don't call these routines in new code
amrdoc = AmritaPDF.doc;
amrZoomWidget = function(w) {
    AmritaPDF.ZoomOnWidget(w)
};
var s = new Object();
var vp = new Array();
amrSet = new RegExp("[\{\}\,]");
for (var i = 0; i < numPages; i++) {
    vp[i] = 0;
}

function amrDisplayWidgets(name, s) {
    var n = 0;
    while (1) {
        var f = this.getField(name + n.toString(10));
        if (!f) break;
        f.hidden = !s;
        n++;
    }
}

function Hs(list) {
    var list;
    var F = list.split(amrSet);
    for (var i = 0; i < F.length; i++) {
        var f = this.getField(F[i]);
        if (f) {
            f.hidden = false;
        }
    }
}

function amrShowWidgets(list1, list2) {
    if (!global.amrpdf && list2) {
        Hs(list2);
    } else {
        Hs(list1);
    }
};

function Hh(list) {
    var list;
    var F = list.split(amrSet);
    for (var i = 0; i < F.length; i++) {
        var f = this.getField(F[i]);
        if (f) {
            f.hidden = true;
        }
    }
}

function amrHideWidgets(list1, list2) {
    if (!global.amrpdf && list2) {
        Hh(list2);
    } else {
        Hh(list1);
    }
};

function amrWidgetsVisible(list) {
    var list;
    var F = list.split(amrSet);
    return Hv(F[0]);
};

function Ht(list) {
    var list;
    var F = list.split(amrSet);
    for (var i = 0; i < F.length; i++) {
        var f = this.getField(F[i]);
        if (f) {
            f.hidden = f.hidden ^ true;
        }
    }
}

function Hf() {
    AmritaPDF.loseFocus();
}

function Hg() {
    var f = this.getField(event.target.name);
    if (f) {
        f.setFocus();
    }
}

function Hv(n) {
    if (this.getField(n)) {
        if (!this.getField(n).hidden) {
            return true
        }
    }
    return false;
}

function Hw(w, s) {
    var n;
    var f1;
    var f2;
    var f3;
    var f4;
    n = 0;
    while (1) {
        n++;
        f1 = this.getField(w + n.toString(10));
        if (f1) f1.hidden = s;
        if (!f1) break;
    }
}

function AmritaCheck(list) {
    Ht(list);
}

function AmritaOK(list) {
    var list;
    if (event.modifier) {
        var f = this.getField('AmrpdfSetDefaults' + this.pageNum.toString(10));
        if (f) {
            f.setFocus();
        }
    }
}
amrDelay = function(t) {
    AmritaPDF.Delay(t);
};

function amrExpandGroup(group) {
    if (typeof group == "undefined") {
        return "";
    }
    var E = new Array();
    var F = group.split(amrSet);
    var Glob = new RegExp();
    Glob.compile(/^(\w+)\[(\d+)\-(\d+|\?)\]/);
    for (var i = 0; i < F.length; i++) {
        widget = F[i];
        if (Glob.test(widget)) {
            var bname = RegExp.$1;
            var n1 = RegExp.$2;
            var n2 = RegExp.$3;
            if (n2 == "?") n2 = 1000000;
            for (var n = n1; n <= n2; n++) {
                var widget = bname + n.toString(10);
                var f = getField(widget);
                if (f) {
                    E.push(widget);
                } else {
                    break;
                }
            }
        } else {
            E.push(widget);
        }
    }
    return E.join();
}
var amrRect = new Array();

function amrPositionGroup(group, xo, yo, scl) {
    if (typeof group == "undefined") {
        return;
    }
    var F = group.split(amrSet);
    var f = this.getField(F[0]);
    var doc = f.doc;
    AmritaPDF.Delay(true);
    if (xo == "restore") {
        for (var i = 0; i < F.length; i++) {
            var f = this.getField(F[i]);
            if (f) {
                if (typeof amrRect[F[i]] != "undefined") {
                    f.hidden = true;
                    f.hidden = false;
                    var v = new Array();
                    v[0] = amrRect[F[i]][0];
                    v[1] = amrRect[F[i]][1];
                    v[2] = amrRect[F[i]][2];
                    v[3] = amrRect[F[i]][3];
                    f.rect = v;
                }
            }
        }
    } else {
        var a = this.getField(F[0]).rect;
        if (xo == "xo") {
            xo = a[0];
        }
        if (yo == "yo") {
            yo = a[1];
        }
        if (typeof amrRect[F[0]] != "undefined") {
            a[0] = amrRect[F[0]][0];
            a[1] = amrRect[F[0]][1];
            a[2] = amrRect[F[0]][2];
            a[3] = amrRect[F[0]][3];
        }
        for (var i = 0; i < F.length; i++) {
            var f = this.getField(F[i]);
            if (f) {
                // f.delay = true;
                var v = f.rect;
                if (typeof amrRect[F[i]] == "undefined") {
                    amrRect[F[i]] = new Array();
                    amrRect[F[i]][0] = v[0];
                    amrRect[F[i]][1] = v[1];
                    amrRect[F[i]][2] = v[2];
                    amrRect[F[i]][3] = v[3];
                } else {
                    v[0] = amrRect[F[i]][0];
                    v[1] = amrRect[F[i]][1];
                    v[2] = amrRect[F[i]][2];
                    v[3] = amrRect[F[i]][3];
                }
                var w = (v[2] - v[0]) * scl;
                var h = (v[1] - v[3]) * scl;
                v[0] = xo - (a[0] - v[0]) * scl;
                v[1] = yo - (a[1] - v[1]) * scl;
                v[2] = v[0] + w;
                v[3] = v[1] - h;
                f.rect = v;
            }
        }
    }
    AmritaPDF.Delay(false);
}
AmritaPDF.WidgetGroup = function(wids) {
    var obj = this;
    obj.group = new Array();
    this.setGroup = function(wids) {
        var set = new RegExp("[\{\}\,]");
        obj.draghdl = false;
        var G = wids.split(set);
        for (var i = 0; i < G.length; i++) {
            var f = getField(G[i]);
            if (f) {
                var c = f.getArray();
                if (c.length > 0 && (c[0] != f)) {
                    for (var j = 0; j < c.length; j++) {
                        obj.addWidget(c[j]);
                    }
                } else {
                    obj.addWidget(f);
                }
            }
        }
    };
    this.setAnchor = function(n) {
        obj.anchor = getField(n);
    };
    this.Show = function() {
        var F = obj.group;
        for (var i = 0; i < F.length; i++) {
            var f = F[i];
            if (f) f.hidden = false;
        }
    };
    this.Hide = function() {
        var F = obj.group;
        for (var i = 0; i < F.length; i++) {
            var f = F[i];
            if (f) f.hidden = true;
        }
    };
    this.addWidget = function(f) {
        obj.group.push(f);
        var a = f.AmritaPDF = new Object();
        var v = f.rect;
        a.rect0 = [v[0], v[1], v[2], v[3]];
        if (obj.group.length == 1) {
            obj.anchor = f;
            obj.rect = [v[0], v[1], v[2], v[3]];
            obj.rect0 = [v[0], v[1], v[2], v[3]];
        } else {
            var r = obj.rect;
            if (v[0] < r[0]) r[0] = v[0];
            if (v[2] > r[2]) r[2] = v[2];
            if (v[1] > r[1]) r[1] = v[1];
            if (v[3] < r[3]) r[3] = v[3];
            obj.rect = [r[0], r[1], r[2], r[3]];
            obj.rect0 = [r[0], r[1], r[2], r[3]];
        }
    };
    this.addWidgets = function(list) {
        var F = list.split(amrSet);
        for (var i = 0; i < F.length; i++) {
            var f = getField(F[i]);
            if (f) {
                this.addWidget(f);
            }
        }
    };
    this.setIcon = function(btn, x, y, scl) {
        obj.icon = getField(btn);
        obj.iconX = x;
        obj.iconY = y;
        obj.iconS = scl;
        var a = obj.icon.AmritaPDF = new Object();
        var v = obj.rect;
        a.rect0 = [v[0], v[1], v[2], v[3]];
    };
    this.Restore = function() {
        obj.Position("restore");
    };
    this._Drag = function(action) {
        var group = obj.group;
        var doc = AmritaPDF.doc;
        var draghdl = obj.draghdl;
        if (action == 'click') {
            if (draghdl) {
                app.clearInterval(draghdl);
                obj.draghdl = false;
            } else {
                AmritaPDF.cdrag = obj._Drag;
                draghdl = obj.draghdl = app.setInterval("AmritaPDF.cdrag()", obj.dt);
                var v = obj.anchor.rect;
                draghdl.dx = doc.mouseX - v[0];
                draghdl.dy = doc.mouseY - v[1];
            }
        } else {
            var x = doc.mouseX - draghdl.dx;
            var y = doc.mouseY - draghdl.dy;
            if ((x != draghdl.x) && (y != draghdl.y)) {
                draghdl.x = x;
                draghdl.y = y;
                obj.Position(x, y);
            }
        }
    };
    this.Drag = function(p) {
        var dt;
        var s;
        obj.dt = 250;
        obj.dscl = 1;
        if (typeof p == "object") {
            if (p.dt) obj.dt = p.dt;
            if (p.scl) obj.dscl = p.scl;
        } else {
            obj.dt = p;
        }
        AmritaPDF.Delay(true);
        obj._Drag('click');
        AmritaPDF.Delay(false);
    };
    this.Iconize = function() {
        AmritaPDF.Delay(true);
        var f = obj.icon;
        if (f) {
            obj.Position(obj.iconX, obj.iconY, obj.iconS);
            f.rect = obj.rect;
            f.hidden = false;
        }
        AmritaPDF.Delay(false);
    };
    this.Rect = function() {
        return obj.rect;
    };
    this.Rect0 = function() {
        return obj.rect0;
    };
    this.Position = function(xo, yo, scl) {
        var group = obj.group;
        if (group.length == 0) {
            return;
        }
        var f = obj.anchor;
        var doc = f.doc;
        AmritaPDF.Delay(true);
        if (xo == "restore") {
            for (var i = 0; i < group.length; i++) {
                var f = group[i];
                if (f) {
                    var v = f.AmritaPDF.rect0;
                    f.hidden = true;
                    f.hidden = false;
                    f.rect = [v[0], v[1], v[2], v[3]];
                }
            }
        } else {
            var a = obj.anchor.AmritaPDF.rect0;
            if (xo == "xo") {
                xo = a[0];
            }
            if (yo == "yo") {
                yo = a[1];
            }
            if (typeof scl == "undefined") {
                scl = 1;
            }
            var cr = obj.rect0;
            var v = [cr[0], cr[1], cr[2], cr[3]];
            var w = (v[2] - v[0]) * scl;
            var h = (v[1] - v[3]) * scl;
            v[0] = xo - (a[0] - v[0]) * scl;
            v[1] = yo - (a[1] - v[1]) * scl;
            v[2] = v[0] + w;
            v[3] = v[1] - h;
            obj.rect = v;
            for (var i = 0; i < group.length; i++) {
                var f = group[i];
                if (f) {
                    var cr = f.AmritaPDF.rect0;
                    var v = [cr[0], cr[1], cr[2], cr[3]];
                    var w = (v[2] - v[0]) * scl;
                    var h = (v[1] - v[3]) * scl;
                    v[0] = xo - (a[0] - v[0]) * scl;
                    v[1] = yo - (a[1] - v[1]) * scl;
                    v[2] = v[0] + w;
                    v[3] = v[1] - h;
                    f.rect = v;
                }
            }
        }
        AmritaPDF.Delay(false);
    };
    if (typeof wids != "undefined") {
        obj.setGroup(wids);
    }
};

// peepdf comment: Javascript code located in object 26 (version 0)

AmritaPDF.loseFocus()

// peepdf comment: Javascript code located in object 26 (version 0)

AmritaPDF.Export("#10", 2);

// peepdf comment: Javascript code located in object 51 (version 0)

if (AmritaPDF._rdoc) {
    try {
        AmritaPDF._rdoc.AmritaPDF.Raise();
    } catch (e) {}
}

